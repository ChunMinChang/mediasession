<pre class="metadata">
Title: Media Session Standard
Group: WHATWG
H1: Media Session
Shortname: mediasession
Status: LS
No Editor: true
Logo: https://resources.whatwg.org/logo.svg
Abstract: This specifications adds the primitives required to integrate Web-based media with platform media keys such as hardware keys found on keyboards, headsets, remote controls, and software keys found in notification areas and on lock screens of mobile devices.
!Participate: <a href="https://github.com/whatwg/mediasession/issues/new">File an issue</a> (<a href="https://github.com/whatwg/mediasession/issues?state=open">open issues</a>)
!Participate: <a href="https://wiki.whatwg.org/wiki/IRC">IRC: #whatwg on Freenode</a>
!Version History: <a href="https://github.com/whatwg/mediasession/commits">https://github.com/whatwg/mediasession/commits</a>
Boilerplate: omit conformance, omit idl-index
</pre>

<pre class='anchors'>
urlPrefix: https://html.spec.whatwg.org/multipage/
    type: dfn
        urlPrefix: infrastructure.html
            text: case-sensitive
        urlPrefix: embedded-content.html
            text: media element
    type: interface
        urlPrefix: embedded-content.html
            text: HTMLMediaElement
</pre>

<h2 id="intro">Introduction</h2>

<em>This section is non-normative.</em>

Web media is used extensively today on the web to play a variety of different
types of media. It is often used to play music, podcasts and radio content. At
other times media elements are used to provide background music, sound effects,
notification sounds and to render WebRTC media stream content.

When playing media on the web, developers are currently forced to adopt a
single default platform modality for playing Web media content. On the other
hand, native applications can access much richer media integration options with
an underlying platform. On mobile devices, native application developers can
request many different forms of media integration with the underlying platform
to obtain access to headphone buttons, lock screens and notification areas as
needed. On desktop devices, native application can request access to keyboard
media key events. Native application developers can specify the parameters in
which media content should pause or duck on audio interruptions (i.e. pause or
lower the volume for the duration of the interruption), continue playing out
when the device screen is switched off, pause when page visibility is lost and
interface with internal and external remote controllers.

This specification provides these powerful media integration features for Web
media. By allowing web developers to express the intended usage of their Web
media, user agents can supply the most suitable platform-level interactions for
that media and enforce logical inter-operation behavior on the current platform
between any number of different sources of Web media.

The specification details the mechanism that allows web developers to specify
the most appropriate category for their Web media and for user agents to then
use these supplied hints to enforce how different Web media sources should
interact with each other, other native media content and the underlying
platform.

<h2 id='conformance'>
Conformance</h2>
All diagrams, examples, and notes in this specification are
non-normative, as are all sections explicitly marked non-normative.
Everything else in this specification is normative.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in RFC 2119.
For readability, these words do not appear in all uppercase letters in this
specification. [[!RFC2119]]

Requirements phrased in the imperative as part of algorithms
(such as "strip any leading space characters" or "return false and
terminate these steps") are to be interpreted with the meaning of the
key word ("must", "should", "may", etc) used in introducing the
algorithm.

Conformance requirements phrased as algorithms or specific steps
may be implemented in any manner, so long as the end result is
equivalent. (In particular, the algorithms defined in this
specification are intended to be easy to follow, and not intended to
be performant.)

<p id="hardwareLimitations">User agents may impose
implementation-specific limits on otherwise unconstrained inputs,
e.g. to prevent denial of service attacks, to guard against running
out of memory, or to work around platform-specific limitations.

When a method or an attribute is said to call another method or attribute, the
user agent must invoke its internal API for that attribute or method so that
e.g. the author can't change the behavior by overriding attributes or methods
with custom properties or functions in JavaScript.

Unless otherwise stated, string comparisons are done in a <a>case-sensitive</a>
manner.

<h2 id='dependencies'>
Dependencies</h2>

The IDL fragments in this specification must be interpreted as
required for conforming IDL fragments, as described in the Web IDL
specification. [[!WEBIDL]]

<h2 id="example">Example Usage</h2>

A media element's <a attribute>kind</a> content attribute can be declared in
HTML:

<pre class='lang-markup'>
&lt;video src="short_ping.webm" kind="transient">
</pre>

Alternatively, a media element's <a attribute>kind</a> attribute can be set in
JavaScript:

<pre class='lang-javascript'>
var myAudio = document.createElement('audio');
console.log(myAudio.kind) // --> ""
myAudio.src = "music.mp3";
myAudio.kind = "content";
// myAudio.outerHTML === "&lt;audio src="music.mp3" kind="content">&lt;/audio>" === true
</pre>

<h2 id="categories">Media Categories</h2>

 A <dfn>Media Category</dfn> is a keyword that maps to a well-defined
interaction state for a <a>media element</a> that should be enforced by user agents on the underlying platform on
which the user agent is currently running.

The following table lists the available <a lt="media category">media
categories</a> keywords and states — the keywords in the left column map to the
states in the cell in the second column on the same row as the keyword. The
attribute should be set based on the preferred definitions in the table’s third
and fourth columns.

<table id="dom-HTMLMediaElement-kind-categories">
  <caption>Return values for <code class="idl"><a attribute lt="kind"
data-link-type="idl">HTMLMediaElement.kind</a></code></caption>
   <tr>
    <th>Category
    <th>State
    <th>Definition
    <th>Examples
  <tr>
   <td>
     &quot;<dfn id="value-media-kind-content" lt="content media attribute
value"><code>content</code></dfn>&quot;
    <td><dfn id="attr-media-kind-content" lt="content media state">Content</dfn>
   <td>Pauses all other media content. Uses the default volume stream. Displays
lock-screen and notification area user interfaces and reacts to changes in both
hardware and software-based media key buttons.
   <td>Music, podcasts, radio
  <tr>
   <td>
     &quot;<dfn id="value-media-kind-transient" lt="transient media attribute
value"><code>transient</code></dfn>&quot;
    <td><dfn id="attr-media-kind-transient" lt="transient media
state">Transient</dfn>
   <td>Does not pause other media content. Ducks other content currently playing
out. Uses the notification volume stream. Does not display lock-screen or
notification area user interfaces and does not react to changes in both hardware
and software-based media key buttons.
   <td>Notification sounds. Spoken driving directions.
  <tr>
    <td>
      &quot;<strong id="value-media-kind-none"><code></code></strong>&quot;
(empty string)
    <td><dfn id="attr-media-kind-default" lt="default media state">Default</dfn>
    <td>No explicit kind, or the kind of the media given is not recognized by
the user agent.
    <td>Legacy media content
</table>

<h2 id="sessions">Media Sessions</h2>

A <dfn>Media Session</dfn> represents one or more <a lt="media element">media
elements</a> within the same <a
href="https://html.spec.whatwg.org/multipage/browsers.html#top-level-browsing-context">top-level
browsing context</a> that share the same <a
href="#dom-HTMLMediaElement-kind-categories">media category state</a>. Each
<a>media session</a> then defines the interactions of those <a lt="media element">media
elements</a> with both the underlying platform and other <a lt="media element">media
elements</a> belonging to other <a lt="media session">media sessions</a> within
the user agent.

 A <a
href="https://html.spec.whatwg.org/multipage/browsers.html#top-level-browsing-context">top-level
browsing context</a> can contain one <a>media session</a> for each available
<a>media category</a>. A <a>media session</a> is created when the first <a>media element</a> matching the <a>media session</a>'s <a>media
category</a> begins playback. A <a>media session</a> is destroyed when the last
<a>media element</a> matching the <a>media session</a>'s <a>media
category</a> ends playback (i.e. the media stream finishes).

 <p class="note">TBD: Improve description of <a>media session</a> lifecycle in
above paragraph.</p>

A <a>media element</a> can have a <dfn>current media session</dfn>, which is a <a>media session</a> object. When a <a>media element</a> is created it does not have a <a>current media session</a>.

A <a>media element</a> obtains a <a>current media session</a> object only when it first reaches a <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#potentially-playing">potentially playing</a> state per the <a>media session invocation algorithm</a> below. A <a>media element</a>'s <a>current media session</a> is removed when it subsequently reaches a non-<a href="https://html.spec.whatwg.org/multipage/embedded-content.html#potentially-playing">potentially playing</a> state per the <a>media session termination algorithm</a> below.

The <dfn>session media elements</dfn> of a <a>media session</a> object are the <a>media elements</a> whose <a>current media session</a> is that <a>media session</a> object.

<h2 id="setting-media-category">Assigning a Media Category to Media
Elements</h2>

<h3 id="html-media-element-additions">Additions to {{HTMLMediaElement}}</h3>

<pre class="idl">
partial interface HTMLMediaElement {
  attribute DOMString kind;
};
</pre>

<dl class=domintro>
 <dt><code> <var>media</var> . {{HTMLMediaElement/kind}}</code>
 <dd>Returns the category the given media falls into. The <a
href="#dom-HTMLMediaElement-kind-categories">possible media categories</a> are
defined above.
</dl>

The <code class="idl"><a attribute lt="kind"
data-link-type="idl">HTMLMediaElement.kind</a></code> IDL attribute, along with
the <dfn id="attr-media-kind"><code class="idl">kind</code></dfn> content
attribute on <code class="idl"><a
href="https://html.spec.whatwg.org/multipage/embedded-content.html#the-video-element">video</a></code>
and <code class="idl"><a
href="https://html.spec.whatwg.org/multipage/embedded-content.html#the-audio-element">audio</a></code>
elements, is an <a
href="https://html.spec.whatwg.org/#enumerated-attribute">enumerated
attribute</a> and must return the <a lt="media category">category of the media
resource</a>, if it has one, or the empty string otherwise.

The <code class="idl"><a attribute lt="kind"
data-link-type="idl">HTMLMediaElement.kind</a></code> IDL attribute must <a
href="https://html.spec.whatwg.org/multipage/infrastructure.html#reflect">reflect</a>
the content attribute of the same name, <a
href="https://html.spec.whatwg.org/multipage/infrastructure.html#limited-to-only-known-values">limited
to only known values</a>.

<h3 id="video-element-additions">Additions to the <code class="idl"><a
href="https://html.spec.whatwg.org/multipage/embedded-content.html#the-video-element">video</a></code>
element</h3>

<dl class="element">
  <dt>Additional <a
href="https://html.spec.whatwg.org/#concept-element-attributes">content
attributes</a>:</dt>
  <dd><code id="the-video-element:attr-media-kind-2"><a
href="#attr-media-kind">kind</a></code> — The type of video</dd>
</dl>

<h3 id="audio-element-additions">Additions to the <code class="idl"><a
href="https://html.spec.whatwg.org/multipage/embedded-content.html#the-audio-element">audio</a></code>
element</h3>

<dl class="element">
  <dt>Additional <a
href="https://html.spec.whatwg.org/#concept-element-attributes">content
attributes</a>:</dt><dd><code id="the-audio-element:attr-media-kind-2"><a
href="#attr-media-kind">kind</a></code> — The type of audio</dd>
</dl>

<h2 id="invoking-media-session">Media Session Invocation</h2>

When a <a>media element</a> transitions to <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#potentially-playing">potentially playing</a> then the user agent must run the <dfn>media session invocation algorithm</dfn> which consists of the following steps, passing in the <a>media element</a> as <var>current media element</var>.

<ol>
  <li>Let <var>media category state</var> be the <var>current media
element</var>'s {{kind}} attribute's state value as defined in the list of <a
href="#dom-HTMLMediaElement-kind-categories">possible media categories</a>. If
no known category match is found, let <var>media category state</var> be
<code><a href="#attr-media-kind-default">Default</a></code>.</li>
  <li>Return and run the remaining steps asynchronously.</li>
  <li>Let <var>media session</var> be the current <a
href="https://html.spec.whatwg.org/multipage/browsers.html#top-level-browsing-context">top-level
browsing context</a>'s <a>media session</a> object that matches <var>media
category state</var>. If no <var>media session</var> is available in the <a
href="https://html.spec.whatwg.org/multipage/browsers.html#top-level-browsing-context">top-level
browsing context</a> that matches <var>media category state</var> then, let
<var>media session</var> be a new <a>media session</a> with a <a>media
category</a> set to the value of <var>media category state</var>.
  <br><br>
  Optionally, based on platform conventions, when creating a new <var>media
session</var>, also request the most appropriate platform-level media focus for
the <var>media session</var> based on the current <var>media category
state</var>.

  </li>
  <li>Add a reference to the <var>current media element</var> to <var>media
session</var>'s <a>session media elements</a>.
  </li>
  <li>Set <var>current media element</var>'s <a>current media session</a> to <var>media session</var>.
session</var>.
  </li>
  <li>Run these substeps:
    <dl class=switch>
       <dt>If <var>media category state</var> is <code><a
href="#attr-media-kind-content">Content</a></code>
       <dd>
        <ol>
          <li><a
href="https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-pause">Pause</a>
all other <code><a href="#attr-media-kind-content">Content</a></code>-based <a lt="media element">media
elements</a> in <var>media session</var>.</li>
          <li><a
href="https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-pause">Pause</a>
all other <a lt="media element">media
elements</a> in all other <code><a
href="#attr-media-kind-content">Content</a></code>-based <a lt="media
session">media sessions</a> within the user agent.</li>
          <li>Optionally, based on platform conventions, the user agent may show
an ongoing media interface in the underlying platform's notifications area
and/or show an ongoing media interface in the underlying platform's lock screen
area.</li>
          <li>Optionally, based on platform conventions, the user agent may
allow hardware and/or software media keys to control playback of <var>current
media element</var>.</li>
        </ol>
       </dd>
       <dt>If <var>media category state</var> is <code><a
href="#attr-media-kind-content">Transient</a></code>
       <dd>
        <ol>
          <li>For the duration of the <var>current media element</var> duck all
other <a lt="media element">media
elements</a> in all other <code><a
href="#attr-media-kind-content">Content</a></code>-based <a lt="media
session">media sessions</a> within the user agent.</li>

            <p class="note">
              The user agent should not provide user access to any hardware or
software media keys and not display any ongoing media interface in the
underlying platform's notifications area or show any ongoing media interface in
the underlying platform's lock screen area for <code><a
href="#attr-media-kind-transient">Transient</a></code>-based media elements.
            </p>
          </li>
        </ol>
       </dd>
       <dt>Otherwise, <var>media category state</var> is <code><a
href="#attr-media-kind-content">Default</a></code>
       <dd class="note">
        @TBW
        <br><br>
        Different platforms (e.g. desktop vs. mobile) currently enforce
different platform-level default behavior for media elements. Should we define a
consistent behavior across platforms or keep the existing defaults per platform?
Do the existing defaults continue to make sense given the presence of the kind
attribute? Can we say something here without being overly prescriptive about
platform-level default conventions?
       </dd>
    </dl>
  </li>
</ol>

<h2 id="interrupting-media-session">Media Session Interruption</h2>

<p class="note">@TBW</p>

<!--
An active <a>media session</a> may be interrupted at any time when the <a>media
session invocation algorithm</a> is run against a <a>media element</a> not
under its control.

Additionally, an active <a>media session</a> may be interrupted by another
application on the underlying platform when that application requests and is
granted platform-level media focus.

When a <a>media session</a> is to be interrupted the user agent must be directly
notified that an interruption has occurred. When the user agent receives an interruption notification then it must run the <dfn>media session interruption algorithm</dfn> against every active <a>media session</a> under its control, consisting of the following steps, passing in each active <a>media session</a> as <var>active media session</var>.
-->

<h2 id="terminating-media-session">Media Session Termination</h2>

When a <a>media element</a> transitions to no longer be <a
href="https://html.spec.whatwg.org/multipage/embedded-content.html#potentially-playing">potentially playing</a>
 nor <a
href="https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-paused">paused</a>
 then the user agent must run the <dfn>media session termination algorithm</dfn>
 which consists of the following steps, passing in the <a>media element</a> as
 <var>current media element</var>.

<ol>
  <li>
    Let <var>media session</var> be the value of <var>current media
    element</var>'s' <a>current media session</a>. If <var>current media
    element</var> does not have a <a>current media session</a>, then abort any
    remaining steps and return.
  </li>
  <li>
    Return and run the remaining steps asynchronously.
  </li>
  <li>Remove the reference for the <var>current media element</var> from <var>media
session</var>'s <a>session media elements</a>.
  </li>
  <li>Remove <a>current media session</a> from <var>current media element</var>.
  <li>
  Optionally, based on platform conventions, remove any previously obtained
  platform-level media focus for <var>media session</var> based on the current
  <var>media category state</var>.
  </li>
  <li>Optionally, based on platform conventions, the user agent must remove any
  previously established ongoing media interface in the underlying platform's
  notifications area and any ongoing media interface in the underlying
  platform's lock screen area, if any.</li>
  <li>Optionally, based on platform conventions, the user agent must prevent
  any hardware and/or software media keys from controlling playback of
  <var>current media element</var>.</li>
</ol>
