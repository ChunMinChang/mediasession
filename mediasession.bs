<pre class="metadata">
Title: Media Session Standard
Group: WHATWG
H1: Media Session
Shortname: mediasession
Status: LS
No Editor: true
Logo: https://resources.whatwg.org/logo.svg
Abstract: This specification adds the primitives required to obtain different
Abstract: levels of platform media focus and access to platform media keys such
Abstract: as hardware keys found on keyboards, headsets, remote controls, and
Abstract: software keys found in notification areas and on lock screens of
Abstract: mobile devices.
!Participate: <a href="https://github.com/whatwg/mediasession/issues/new">File an issue</a> (<a href="https://github.com/whatwg/mediasession/issues?state=open">open issues</a>)
!Participate: <a href="https://wiki.whatwg.org/wiki/IRC">IRC: #whatwg on Freenode</a>
!Version History: <a href="https://github.com/whatwg/mediasession/commits">https://github.com/whatwg/mediasession/commits</a>
Boilerplate: omit conformance, omit idl-index
</pre>

<pre class="anchors">
urlPrefix: https://html.spec.whatwg.org/multipage/
    type: interface
        urlPrefix: embedded-content.html
            text: HTMLMediaElement
    type: element
        urlPrefix: embedded-content.html
            text: video
            text: audio
    type: dfn
        urlPrefix: infrastructure.html
            text: case-sensitive; url: #case-sensitivity-and-string-comparison
            text: reflect
            text: limited to only known values
        urlPrefix: embedded-content.html
            text: media element
            text: potentially playing
            text: paused; url: #dom-media-paused
        urlPrefix: infrastructure.html
            text: enumerated attribute
        urlPrefix: browsers.html
            text: top-level browsing context; url: #top-level-browsing-context
    type: method
        urlPrefix: embedded-content.html
            text: play(); for: HTMLMediaElement; url: #dom-media-play
            text: pause(); for: HTMLMediaElement; url: #dom-media-pause

</pre>

<h2 id="intro">Introduction</h2>

<em>This section is non-normative.</em>

Media is used extensively today on the web to play a variety of different types
of media content. It is often used to play music, podcasts and radio content. At
other times media elements are used to provide background music, sound effects,
notification sounds and to render WebRTC media stream content.

When playing media on the web, developers are currently forced to adopt a single
default platform modality for playing web media content. On the other hand,
native applications can access much richer media integration options with an
underlying platform. On mobile devices, native application developers can
request many different forms of media integration with the underlying platform
to obtain access to headphone buttons, lock screens and notification areas as
needed. On desktop devices, native applications have access to keyboard media
key events. Native application developers can specify the conditions in which
media content should pause or duck on audio interruptions (i.e. pause or lower
the volume for the duration of the interruption), continue playing out when
application focus is lost or the device screen is switched off and interface
with internal and external remote controllers.

This specification provides these powerful media integration features for web
media. By allowing web developers to express the intended usage of their media,
user agents can supply the most suitable platform-level interactions for that
media and enforce logical inter-operation behavior on the current platform
between any number of different sources of media.

The specification details the mechanism that allows web developers to specify
the most appropriate category for their media and for user agents to then use
these supplied hints to enforce how different sources of web media should
interact with each other, other native media content and the underlying
platform.

<h2>Conformance</h2>

All diagrams, examples, and notes in this specification are non-normative, as
are all sections explicitly marked non-normative. Everything else in this
specification is normative.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119. For readability, these
words do not appear in all uppercase letters in this specification. [[!RFC2119]]

Requirements phrased in the imperative as part of algorithms (such as "strip any
leading space characters" or "return false and terminate these steps") are to be
interpreted with the meaning of the key word ("must", "should", "may", etc) used
in introducing the algorithm.

Conformance requirements phrased as algorithms or specific steps may be
implemented in any manner, so long as the end result is equivalent. (In
particular, the algorithms defined in this specification are intended to be easy
to follow, and not intended to be performant.)

User agents may impose implementation-specific limits on otherwise unconstrained
inputs, e.g. to prevent denial of service attacks, to guard against running out
of memory, or to work around platform-specific limitations.

When a method or an attribute is said to call another method or attribute, the
user agent must invoke its internal API for that attribute or method so that
e.g. the author can't change the behavior by overriding attributes or methods
with custom properties or functions in JavaScript.

Unless otherwise stated, string comparisons are done in a <a>case-sensitive</a>
manner.

<h2>Dependencies</h2>

The IDL fragments in this specification must be interpreted as required for
conforming IDL fragments, as described in the Web IDL specification. [[!WEBIDL]]

<h2 id="example">Example usage</h2>

A <code><a element>video</a></code> element's <code><a lt="audio
kind">kind</a></code> content attribute can be declared in HTML:

<pre class="lang-markup">
&lt;video src="short_ping.webm" kind="transient">
</pre>

Similarly, an <code><a element>audio</a></code> element's <code><a lt="audio
kind">kind</a></code> content attribute can be declared in HTML:

<pre class="lang-markup">
&lt;audio src="track1.ogg" kind="content">
</pre>

As both <code><a element>audio</a></code> and <code><a element>video</a></code>
elements implement the {{HTMLMediaElement}} interface, these element's
{{HTMLMediaElement/kind}} IDL attribute can also be set via JavaScript:

<pre class="lang-javascript">
var myAudio = document.createElement("audio");
console.log(myAudio.kind) // --> ""
myAudio.src = "music.mp3";
myAudio.kind = "content";
// myAudio.outerHTML === "&lt;audio src="music.mp3" kind="content">&lt;/audio>" === true
</pre>

<h2 id="categories">Media categories</h2>

A <dfn>media category</dfn> is a keyword that maps to a well-defined interaction
state for a <a>media element</a> that user agents use to enforce
platform-specific interaction and interoperation between web media.

The following table lists the available <a lt="media category">media
categories</a> keywords and states — the keywords in the left column map to
the states in the cell in the second column on the same row as the keyword. The
attribute should be set based on the preferred definitions in the table’s
third and fourth columns.

<table id="valid-media-categories">
  <tr>
    <th>Category</th>
    <th>State</th>
    <th>Definition</th>
    <th>Examples</th>
  </tr>
  <tr>
    <td>
      &quot;<dfn lt="content attribute value"><code>content</code></dfn>&quot;
    </td>
    <td>
      <dfn lt="content media state">Content</dfn>
    </td>
    <td>
      Pauses all other media content. Displays lock-screen and notification area
      user interfaces and reacts to changes in both hardware and software-based
      media key buttons.
    </td>
    <td>
      Music, podcasts, radio
    </td>
  </tr>
  <tr>
    <td>
      &quot;<dfn lt="transient attribute
      value"><code>transient</code></dfn>&quot;
    </td>
    <td>
      <dfn lt="transient media state">Transient</dfn>
    </td>
    <td>
      Does not pause other media content. Ducks other content currently playing
      out. Does not display lock-screen or notification area user interfaces and
      does not react to changes in both hardware and software-based media key
      buttons.
    </td>
    <td>
      Notification sounds. Spoken driving directions.
    </td>
  </tr>
  <tr>
    <td>
      &quot;<strong id="default-media-value"><code></code></strong>&quot; (empty
      string)
    </td>
    <td>
      <dfn lt="default media state">Default</dfn>
    </td>
    <td>
      No explicit kind, or the kind of the media given is not recognized by the
      user agent.
    </td>
    <td>
      Legacy media content
    </td>
  </tr>
</table>

<h2 id="sessions">Media sessions</h2>

A <dfn>media session</dfn> represents one or more <a lt="media element">media
elements</a> within the same <a>top-level browsing context</a> that share the
same <a>media category</a>. Each <a>media session</a> then defines the
interactions of those <a lt="media element">media elements</a> with both the
underlying platform and other <a lt="media element">media elements</a> belonging
to other <a lt="media session">media sessions</a> within the user agent.

A <a>media element</a> can have a <dfn>current media session</dfn>, which is a
<a>media session</a> object. When a <a>media element</a> is created it does not
have a <a>current media session</a>.

A <a>media element</a> obtains a <a>current media session</a> object only when
it first reaches a <a>potentially playing</a> state per the <a>media session
invocation algorithm</a> below. A <a>media element</a>'s <a>current media
session</a> is removed when it subsequently reaches a non-<a>potentially
playing</a> state per the <a>media session termination algorithm</a> below.

The <dfn>session media elements</dfn> of a <a>media session</a> object are the
<a>media elements</a> whose <a>current media session</a> is that
<a>media session</a> object.

<h2 id="setting-media-category">Assigning a media category to media
elements</h2>

<h3 id="html-media-element-additions">Additions to {{HTMLMediaElement}}</h3>

<pre class="idl">
partial interface HTMLMediaElement {
  attribute DOMString kind;
};
</pre>

<dl class=domintro>
  <dt>
    <code><var>media</var> . {{HTMLMediaElement/kind}}</code>
  </dt>
  <dd>
    Returns the category the given media falls into. The <a
    href="#valid-media-categories">possible media categories</a> are defined
    above.
  </dd>
</dl>

The <dfn attribute for="HTMLMediaElement" lt="kind"><code>kind</code></dfn> IDL
attribute is intended to provide a hint to the user agent about what the author
thinks will lead to the best user experience for media playback. The attribute
may be ignored altogether, for example based on explicit user preferences or
based on the capabilities of the underlying platform.

The <code>{{HTMLMediaElement/kind}}</code> IDL attribute can be changed even
once the media resource is being played; but it is only read by the platform at
the point that the <a>media session invocation algorithm</a> is run against a
<a>media element</a>. Thus, changing this attribute once the media element is
<a>potentially playing</a> does not dynamically change the <a>media session</a>
to which the <a>media element</a> belongs.

The <code>{{HTMLMediaElement/kind}}</code> IDL attribute must
<a>reflect</a> the <code><a element>video</a></code> and <code><a
element>audio</a></code> element content attribute of the same name, <a>limited
to only known values</a>.

<h3 id="video-element-additions">Additions to the <code><a
element>video</a></code> element</h3>

<dl class="element">
  <dt>
    Additional content attributes:
  </dt>
  <dd>
    <dfn lt="video kind"><code>kind</code></dfn> — The type of video
  </dd>
</dl>

The <code><a lt="video kind">kind</a></code> content attribute on a
<code><a element>video</a></code> element is an <a>enumerated attribute</a>
and must return the video element's <a>media category</a>, if it has one, or the
empty string otherwise.

<h3 id="audio-element-additions">Additions to the <code><a
element>audio</a></code> element</h3>

<dl class="element">
  <dt>
    Additional content attributes:
  </dt>
  <dd>
    <dfn lt="audio kind"><code>kind</code></dfn> — The type of audio
  </dd>
</dl>

The <code><a lt="audio kind">kind</a></code> content attribute on an <code><a
element>audio</a></code> element is an <a>enumerated attribute</a> and must
return the audio element's <a>media category</a>, if it has one, or the empty
string otherwise.

<h2 id="invoking-media-session">Media session invocation</h2>

When a <a>media element</a> transitions to <a>potentially playing</a> then the
user agent must run the <dfn>media session invocation algorithm</dfn> which
consists of the following steps, passing in the <a>media element</a> as
<var>current media element</var>.

<ol>
  <li>
    Let <var>media category state</var> be the <var>current media
    element</var>'s {{kind}} attribute's state value as defined in the list of
    <a href="#valid-media-categories">possible media categories</a>. If no known
    category match is found, let <var>media category state</var> be <code><a
    lt="default media state">Default</a></code>.
  </li>
  <li>
    Return and run the remaining steps asynchronously.
  </li>
  <li>
    Let <var>media session</var> be the current <a>top-level browsing
    context</a>'s <a>media session</a> object that matches <var>media category
    state</var>. If no <var>media session</var> is available in the <a>top-level
    browsing context</a> that matches <var>media category state</var> then, let
    <var>media session</var> be a new <a>media session</a> with a <a>media
    category</a> set to the value of <var>media category state</var>.

    Optionally, based on platform conventions, when creating a new <var>media
    session</var>, also request the most appropriate platform-level media focus
    for the <var>media session</var> based on the current <var>media category
    state</var>.
  </li>
  <li>
    Add a reference to the <var>current media element</var> to <var>media
    session</var>'s <a>session media elements</a>.
  </li>
  <li>
    Set <var>current media element</var>'s <a>current media session</a> to
    <var>media session</var>.
  </li>
  <li>
    Run these substeps:

    <dl class=switch>
      <dt>
        If <var>media category state</var> is <code><a lt="content media
        state">Content</a></code>
      </dt>
      <dd>
        <ol>
          <li>
            {{pause()}} all other <code><a lt="content media
            state">Content</a></code>-based <a lt="media element">media
            elements</a> in <var>media session</var>.
          </li>
          <li>
            {{pause()}} all other <a lt="media element">media elements</a> in
            all other <code><a lt="content media state">Content</a></code>-based
            <a lt="media session">media sessions</a> within the user agent.
          </li>
          <li>
            Optionally, based on platform conventions, the user agent may show
            an ongoing media interface in the underlying platform's
            notifications area and/or show an ongoing media interface in the
            underlying platform's lock screen area.
          </li>
          <li>
            Optionally, based on platform conventions, the user agent may allow
            hardware and/or software media keys to control playback of
            <var>current media element</var>.
          </li>
        </ol>
      </dd>
      <dt>
        If <var>media category state</var> is <code><a lt="transient media
        state">Transient</a></code>
      </dt>
      <dd>
        <ol>
          <li>
            For the duration of the <var>current media element</var> duck all
            other
            <a lt="media element">media elements</a> in all other <code><a
            lt="content media state">Content</a></code>-based <a lt="media
            session">media sessions</a> within the user agent.

            <p class="note">
              The user agent should not provide user access to any hardware or
              software media keys and not display any ongoing media interface in
              the underlying platform's notifications area or show any ongoing
              media interface in the underlying platform's lock screen area for
              <code><a lt="transient media state">Transient</a></code>-based
              media elements.
            </p>
          </li>
        </ol>
      </dd>
      <dt>
        Otherwise, <var>media category state</var> is <code><a lt="default media
        state">Default</a></code>
      </dt>
      <dd class="note">
        @TBW

        Different platforms (e.g. desktop vs. mobile) currently enforce
        different platform-level default behavior for media elements. Should we
        define a consistent behavior across platforms or keep the existing
        defaults per platform? Do the existing defaults continue to make sense
        given the presence of the kind attribute? Can we say something here
        without being overly prescriptive about platform-level default
        conventions?
      </dd>
    </dl>
  </li>
</ol>

<h2 id="interrupting-media-session">Media session interruption</h2>

<p class="note">
  @TBW
</p>

<!-- An active <a>media session</a> may be interrupted at any time when the
<a>media session invocation algorithm</a> is run against a <a>media element</a>
not under its control. Additionally, an active <a>media session</a> may be
interrupted by another application on the underlying platform when that
application requests and is granted platform-level media focus. When a <a>media
session</a> is to be interrupted the user agent must be directly notified that
an interruption has occurred. When the user agent receives an interruption
notification then it must run the <dfn>media session interruption
algorithm</dfn> against every active <a>media session</a> under its control,
consisting of the following steps, passing in each active <a>media session</a>
as <var>active media session</var>. -->

<h2 id="terminating-media-session">Media session termination</h2>

When a <a>media element</a> transitions to no longer be
<a>potentially playing</a> nor <a>paused</a> then the user agent must run the
<dfn>media session termination algorithm</dfn> which consists of the following
steps, passing in the <a>media element</a> as <var>current media element</var>.

<ol>
  <li>
    Let <var>media session</var> be the value of <var>current media
    element</var>'s <a>current media session</a>. If <var>current media
    element</var> does not have a <a>current media session</a>, then abort any
    remaining steps and return.
  </li>
  <li>
    Return and run the remaining steps asynchronously.
  </li>
  <li>
    Remove the reference for the <var>current media element</var> from
    <var>media session</var>'s <a>session media elements</a>.
  </li>
  <li>
    Remove <a>current media session</a> from <var>current media element</var>.
  </li>
  <li>
    Optionally, based on platform conventions, remove any previously obtained
    platform-level media focus for <var>media session</var> based on the current
    <var>media category state</var>.
  </li>
  <li>
    Optionally, based on platform conventions, the user agent must remove any
    previously established ongoing media interface in the underlying platform's
    notifications area and any ongoing media interface in the underlying
    platform's lock screen area, if any.
  </li>
  <li>
    Optionally, based on platform conventions, the user agent must prevent any
    hardware and/or software media keys from controlling playback of
    <var>current media element</var>.
  </li>
</ol>
