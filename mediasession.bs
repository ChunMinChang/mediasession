<pre class="metadata">
Title: Media Session Standard
Group: WHATWG
H1: Media Session
Shortname: mediasession
Status: LS
No Editor: true
Logo: https://resources.whatwg.org/logo.svg
Abstract: This specification adds the primitives required to obtain different
Abstract: levels of platform media focus and access to platform media keys such
Abstract: as hardware keys found on keyboards, headsets, remote controls, and
Abstract: software keys found in notification areas and on lock screens of
Abstract: mobile devices.
!Participate: <a href="https://github.com/whatwg/mediasession/issues/new">File an issue</a> (<a href="https://github.com/whatwg/mediasession/issues?state=open">open issues</a>)
!Participate: <a href="https://wiki.whatwg.org/wiki/IRC">IRC: #whatwg on Freenode</a>
!Version History: <a href="https://github.com/whatwg/mediasession/commits">https://github.com/whatwg/mediasession/commits</a>
Boilerplate: omit conformance, omit idl-index
</pre>

<pre class="anchors">
urlPrefix: https://html.spec.whatwg.org/multipage/; spec: HTML
    type: interface
        urlPrefix: embedded-content.html
            text: HTMLMediaElement
    type: element
        urlPrefix: embedded-content.html
            text: video
            text: audio
    type: dfn
        urlPrefix: infrastructure.html
            text: case-sensitive; url: #case-sensitivity-and-string-comparison
            text: reflect
            text: limited to only known values
        urlPrefix: embedded-content.html
            text: media element
            text: media element load algorithm
            text: potentially playing
            text: ended playback
            text: paused; url: #dom-media-paused
        urlPrefix: infrastructure.html
            text: enumerated attribute
        urlPrefix: browsers.html
            text: browsing context
            text: top-level browsing context; url: #top-level-browsing-context
    type: method
        urlPrefix: embedded-content.html
            text: play(); for: HTMLMediaElement; url: #dom-media-play
            text: pause(); for: HTMLMediaElement; url: #dom-media-pause
    type: attribute
        urlPrefix: embedded-content.html
            text: paused; for: HTMLMediaElement; url: #dom-media-paused
            text: readyState; for: HTMLMediaElement; url: #dom-media-readystate
            text: HAVE_FUTURE_DATA; for: HTMLMediaElement; url: #dom-media-have_future_data
            text: HAVE_ENOUGH_DATA; for: HTMLMediaElement; url: #dom-media-have_enough_data
</pre>

<h2 id="introduction">Introduction</h2>

<em>This section is non-normative.</em>

Media is used extensively today on the web to play a variety of different types
of content. It is often used to play music, podcasts and radio content. At other
times media elements are used to provide background music, sound effects,
notification sounds and to render WebRTC media stream content.

When playing media on the web, developers are currently forced to adopt a single
default platform modality for playing all media content. On the other hand,
native applications can access much richer media integration options with an
underlying platform. On mobile devices, native application developers can
request many different forms of media integration with the platform to obtain
access to headphone buttons, lock screens and notification areas as needed. On
desktop devices, native applications have access to keyboard media key events.
Native application developers can specify the conditions in which media content
should pause or duck on audio interruptions (i.e. pause or lower the volume for
the duration of an interruption), continue playing out when application focus is
lost or the device screen is switched off and interface with internal and
external remote controllers.

This specification provides these platform media integration features for web
media. By allowing web developers to express the intended usage of their media
content, user agents can supply the most suitable platform-level interactions
for that content and enforce logical inter-operation behavior on the current
platform between any number of different sources of media.

This specification describes the mechanism that allows web developers to specify
the most appropriate category for their media content and for user agents to
then use these supplied hints to enforce how different sources of web media
should interact with each other, other native media content and the underlying
platform.

<h2 id="conformance">Conformance</h2>

All diagrams, examples, and notes in this specification are non-normative, as
are all sections explicitly marked non-normative. Everything else in this
specification is normative.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119. For readability, these
words do not appear in all uppercase letters in this specification. [[!RFC2119]]

Requirements phrased in the imperative as part of algorithms (such as "strip any
leading space characters" or "return false and terminate these steps") are to be
interpreted with the meaning of the key word ("must", "should", "may", etc) used
in introducing the algorithm.

Conformance requirements phrased as algorithms or specific steps may be
implemented in any manner, so long as the end result is equivalent. (In
particular, the algorithms defined in this specification are intended to be easy
to follow, and not intended to be performant.)

User agents may impose implementation-specific limits on otherwise unconstrained
inputs, e.g. to prevent denial of service attacks, to guard against running out
of memory, or to work around platform-specific limitations.

When a method or an attribute is said to call another method or attribute, the
user agent must invoke its internal API for that attribute or method so that
e.g. the author can't change the behavior by overriding attributes or methods
with custom properties or functions in JavaScript.

Unless otherwise stated, string comparisons are done in a <a>case-sensitive</a>
manner.

<h2 id="dependencies">Dependencies</h2>

The IDL fragments in this specification must be interpreted as required for
conforming IDL fragments, as described in the Web IDL specification. [[!WEBIDL]]

<h2 id="media-categories">Media categories</h2>

A <dfn>media category</dfn> is a keyword that maps to a well-defined interaction
state for a <a>media element</a> that user agents use to enforce
platform-specific interaction and interoperation between web media.

The following table lists the available <a>media categories</a> keywords and
states — the keywords in the left column map to the states in the cell in the
second column on the same row as the keyword. The attribute should be set based
on the preferred definitions in the table’s third and fourth columns.

<table id="valid-media-categories">
  <tr>
    <th>Category</th>
    <th>State</th>
    <th>Definition</th>
    <th>Examples</th>
  </tr>
  <tr>
    <td>
      &quot;<dfn lt="content attribute value"><code>content</code></dfn>&quot;
    </td>
    <td>
      <dfn lt="content media state">Content</dfn>
    </td>
    <td>
      <ul>
        <li>
          Indefinitely pauses all other <a lt="active media session
          state">active</a>
          <code><a lt="default media state">Default</a></code> and <code><a
          lt="content media state">Content</a></code> content when <a
          href="#media-session-invocation">playback begins</a>.
        </li>
        <li>
          Displays lock-screen and notification area user interfaces when
          <a href="#media-session-invocation">playback begins</a>.
        </li>
        <li>
          Reacts to changes in both hardware and software-based media key
          buttons when <a href="#media-session-invocation">playback begins</a>.
        </li>
        <li>
          Ducks itself when <code><a lt="transient mixable media
          state">Transient_Mixable</a></code> content <a
          href="#media-session-interruption">starts interrupting</a>. Unducks
          itself when <code><a lt="transient mixable media
          state">Transient_Mixable</a></code> content <a
          href="#media-session-release">ends playback</a>.
        </li>
        <li>
          Pauses itself when <code><a lt="transient exclusive media
          state">Transient_Exclusive</a></code> content <a
          href="#media-session-interruption">starts interrupting</a>. Unpauses
          itself when <code><a lt="transient exclusive media
          state">Transient_Exclusive</a></code> content <a
          href="#media-session-release">ends playback</a>.
        </li>
        <li>
          Continues playing normally when <code><a lt="ambient media
          state">Ambient</a></code> content <a
          href="#media-session-interruption">starts interrupting</a>.
        </li>
      </ul>
    </td>
    <td>
      Music, podcasts, radio streams.
    </td>
  </tr>
  <tr>
    <td>
      &quot;<dfn lt="transient attribute
      value"><code>transient</code></dfn>&quot;
    </td>
    <td>
      <dfn lt="transient mixable media state">Transient_Mixable</dfn>
    </td>
    <td>
      <ul>
        <li>
          Ducks all other <a lt="active media session state">active</a> <code><a
          lt="default media state">Default</a></code>
          and <code><a lt="content media state">Content</a></code> content when
          <a href="#media-session-invocation">playback begins</a>. Unducks all
          other <a lt="interrupted media session state">interrupted</a> <code><a
          lt="default media state">Default</a></code> and <code><a lt="content
          media state">Content</a></code> content when <a
          href="#media-session-release">playback ends</a>.
        </li>
        <li>
          Does not display lock-screen and notification area user interfaces
          when <a href="#media-session-invocation">playback begins</a>.
        </li>
        <li>
          Does not react to changes in both hardware and software-based media
          key buttons when <a href="#media-session-invocation">playback
          begins</a>.
        </li>
        <li>
          Pauses itself when <code><a lt="transient exclusive media
          state">Transient_Exclusive</a></code> content <a
          href="#media-session-interruption">starts interrupting</a>. Unpauses
          itself when <code><a lt="transient exclusive media
          state">Transient_Exclusive</a></code> content <a
          href="#media-session-release">ends playback</a>.
        </li>
        <li>
          Continues playing normally when other <code><a lt="transient mixable
          media state">Transient_Mixable</a></code> or <code><a lt="ambient
          media state">Ambient</a></code> content <a
          href="#media-session-interruption">starts interrupting</a>.
        </li>
      </ul>
    </td>
    <td>
      Notification sounds. Spoken driving directions where playback of music in
      the background is acceptable.
    </td>
  </tr>
  <tr>
    <td>
      &quot;<dfn lt="transientsolo attribute
      value"><code>transientsolo</code></dfn>&quot;
    </td>
    <td>
      <dfn lt="transient exclusive media state">Transient_Exclusive</dfn>
    </td>
    <td>
      <ul>
        <li>
          Pauses all other <a lt="active media session state">active</a>
          <code><a lt="default media state">Default</a></code>,
          <code><a lt="content media state">Content</a></code>, <code><a
          lt="transient mixable media state">Transient_Mixable</a></code> and
          <code><a lt="transient exclusive media
          state">Transient_Exclusive</a></code> content when <a
          href="#media-session-invocation">playback begins</a>. Unpauses all <a
          lt="interrupted media session state">interrupted</a>
          <code><a lt="default media state">Default</a></code>, <code><a
          lt="content media state">Content</a></code>, <code><a lt="transient
          mixable media state">Transient_Mixable</a></code> and <code><a
          lt="transient exclusive media state">Transient_Exclusive</a></code>
          content when <a href="#media-session-release">playback ends</a>.
        </li>
        <li>
          Does not display lock-screen and notification area user interfaces
          when <a href="#media-session-invocation">playback begins</a>.
        </li>
        <li>
          Does not react to changes in both hardware and software-based media
          key buttons when <a href="#media-session-invocation">playback
          begins</a>.
        </li>
        <li>
          Pauses itself when other <code><a lt="transient exclusive media
          state">Transient_Exclusive</a></code> content <a
          href="#media-session-interruption">starts interrupting</a>. Unpauses
          itself when other <code><a lt="transient exclusive media
          state">Transient_Exclusive</a></code> content <a
          href="#media-session-release">ends playback</a>.
        </li>
        <li>
          Continues playing normally when <code><a lt="ambient media
          state">Ambient</a></code> content <a
          href="#media-session-interruption">starts interrupting</a>.
        </li>
      </ul>
    </td>
    <td>
      Playback of driving directions. Other spoken notifications.
    </td>
  </tr>
  <tr>
    <td>
      &quot;<dfn lt="ambient attribute value"><code>ambient</code></dfn>&quot;
    </td>
    <td>
      <dfn lt="ambient media state">Ambient</dfn>
    </td>
    <td>
      <ul>
        <li>
          Does not interact with any other <code><a lt="default media
          state">Default</a></code>,
          <code><a lt="content media state">Content</a></code>, <code><a
          lt="transient mixable media state">Transient_Mixable</a></code>,
          <code><a lt="transient exclusive media
          state">Transient_Exclusive</a></code> or <code><a lt="ambient media
          state">Ambient</a></code> content during playback.
        </li>
        <li>
          Does not display lock-screen and notification area user interfaces
          when <a href="#media-session-invocation">playback begins</a>.
        </li>
        <li>
          Does not react to changes in both hardware and software-based media
          key buttons when <a href="#media-session-invocation">playback
          begins</a>.
        </li>
        <li>
          Pauses itself when its <a>browsing context</a> loses focus (i.e. the
          page is placed in the background or the user agent is minimized or the
          screen is switched off). Unpauses itself when its <a>browsing
          context</a> re-gains focus (i.e. the user agent is in the foreground
          and the page is visible again).
        </li>
      </ul>
    </td>
    <td>
      UI sounds. In-game sound effects.
    </td>
  </tr>
  <tr>
    <td>
      &quot;<strong id="default-media-value"><code></code></strong>&quot; (empty
      string)
    </td>
    <td>
      <dfn lt="default media state">Default</dfn>
    </td>
    <td>
      <ul>
        <li>
          No explicit kind, or the kind of the media given is not recognized by
          the user agent.
        </li>
      </ul>
    </td>
    <td>
      Legacy media content
    </td>
  </tr>
</table>

<h2 id="media-sessions">Media sessions</h2>

A <dfn>media session</dfn> represents one or more <a>media elements</a> within
the same <a>top-level browsing context</a> that share the same <a>media
category</a>. Each <a>media session</a> then defines the interactions of those
<a>media elements</a> with both the underlying platform and other <a>media
elements</a> belonging to other <a>media sessions</a> within the user agent.

A <a>media element</a> can have a <dfn>current media session</dfn>, which is a
<a>media session</a>. When a <a>media element</a> is created it does not have a
<a>current media session</a>.

The <dfn>participating media elements</dfn> of a <a>media session</a> are the
<a>media elements</a> whose <a>current media session</a> is that
<a>media session</a>.

<a>Media sessions</a> have a <dfn>current state</dfn>, which describes their
current status with respect to any interaction with other <a>media sessions</a>.
The possible values are as follows:

<dl>
  <dt>
    <dfn lt="idle media session state"><code>IDLE</code></dfn>
  </dt>
  <dd>
    The <a>media session</a> does not have any platform-level media focus nor is
    it in a suspended state.
  </dd>
  <dt>
    <dfn lt="active media session state"><code>ACTIVE</code></dfn>
  </dt>
  <dd>
    The <a>media session</a> currently has platform-level media focus.
  </dd>
  <dt>
    <dfn lt="interrupted media session state"><code>INTERRUPTED</code></dfn>
  </dt>
  <dd>
    The <a>media session</a> is currently suspended from having platform-level
    media focus and its <a>participating media elements</a> are either paused or
    ducked based on the <a>media session</a>'s <a>media category</a> and pending
    completion of another <a>media session</a>'s media focus.
  </dd>
</dl>

<p>&nbsp;</p>

When a <a>media session</a> is created its <a>current state</a> must be
initially set to
<code><a lt="idle media session state">IDLE</a></code>.

When the <a>media session invocation algorithm</a> is run a <a>media
session</a>'s <a>current state</a> may be set from <code><a lt="idle media
session state">IDLE</a></code> to
<code><a lt="active media session state">ACTIVE</a></code>.

When the <a>media session interruption algorithm</a> is run a <a>media
session</a>'s <a>current state</a> may be set from
<code><a lt="active media session state">ACTIVE</a></code> to either <code><a
lt="idle media session state">IDLE</a></code> or <code><a lt="interrupted media
session state">INTERRUPTED</a></code> depending on its associated <a>media
category</a>.

When the <a>media session release algorithm</a> is run a <a>media session</a>'s
<a>current state</a>
may be set from <code><a lt="active media session state">ACTIVE</a></code> to
<code><a lt="idle media session state">IDLE</a></code>. Any <a lt="interrupted
media session state">interrupted</a> <a>media sessions</a> may then be set from
<code><a lt="interrupted media session state">INTERRUPTED</a></code>
to <code><a lt="active media session state">ACTIVE</a></code> during this
algorithm.


<h2 id="assigning-a-media-category-to-media-elements">Assigning a media category
to media elements</h2>

<h3 id="extensions-to-the-htmlmediaelement-interface">Extensions to the
{{HTMLMediaElement}} interface</h3>

<pre class="idl">
partial interface HTMLMediaElement {
  attribute DOMString kind;
};
</pre>

<dl class=domintro>
  <dt>
    <code><var>media</var> . {{HTMLMediaElement/kind}}</code>
  </dt>
  <dd>
    Returns the category the given media falls into. The <a
    href="#valid-media-categories">possible media categories</a> are defined
    above.
  </dd>
</dl>

The <dfn attribute for="HTMLMediaElement" lt="kind"><code>kind</code></dfn> IDL
attribute is intended to provide a hint to the user agent about what the author
thinks will lead to the best user experience for media playback. The attribute
may be ignored altogether, for example based on explicit user preferences or
based on the capabilities of the underlying platform.

The <code>{{HTMLMediaElement/kind}}</code> IDL attribute can be changed even
once the media resource is being played; but it is only read by the platform at
the point that the <a>media session invocation algorithm</a> is run against a
<a>media element</a>. Thus, changing this attribute once the media element is
<a>potentially playing</a> does not dynamically change the <a>media session</a>
to which the <a>media element</a> belongs.

The <code>{{HTMLMediaElement/kind}}</code> IDL attribute must
<a>reflect</a> the <code><a element>video</a></code> and <code><a
element>audio</a></code> element content attribute of the same name, <a>limited
to only known values</a>.

<div class="example">
  As both <code><a element>audio</a></code> and <code><a
  element>video</a></code>
  elements implement the {{HTMLMediaElement}} interface, these element's
  {{HTMLMediaElement/kind}} IDL attribute can be set via JavaScript:

  <pre class="lang-javascript">
var myAudio = document.createElement("audio");
console.log(myAudio.kind) // --> ""
myAudio.src = "music.mp3";
myAudio.kind = "content";
// myAudio.outerHTML === "&lt;audio src="music.mp3" kind="content">&lt;/audio>" === true
  </pre>
</div>

<h3 id="extensions-to-the-video-element">Extensions to the <code><a
element>video</a></code> element</h3>

<dl class="element">
  <dt>
    Additional content attributes:
  </dt>
  <dd>
    <dfn lt="video kind"><code>kind</code></dfn> — The type of video
  </dd>
</dl>

The <code><a lt="video kind">kind</a></code> content attribute on a
<code><a element>video</a></code> element is an <a>enumerated attribute</a>
and must return the video element's <a>media category</a>, if it has one, or the
empty string otherwise.

<div class="example">
  A <code><a element>video</a></code> element's <code><a lt="audio
  kind">kind</a></code> content attribute can be declared in as follows HTML:

  <pre class="lang-markup">
&lt;video src="short_ping.webm" kind="transient">
  </pre>
</div>

<h3 id="extensions-to-the-audio-element">Extensions to the <code><a
element>audio</a></code> element</h3>

<dl class="element">
  <dt>
    Additional content attributes:
  </dt>
  <dd>
    <dfn lt="audio kind"><code>kind</code></dfn> — The type of audio
  </dd>
</dl>

The <code><a lt="audio kind">kind</a></code> content attribute on an <code><a
element>audio</a></code> element is an <a>enumerated attribute</a> and must
return the audio element's <a>media category</a>, if it has one, or the empty
string otherwise.

<div class="example">
  An <code><a element>audio</a></code> element's <code><a lt="audio
  kind">kind</a></code> content attribute can be declared as follows in HTML:

  <pre class="lang-markup">
&lt;audio src="track1.ogg" kind="content">
  </pre>
</div>

<h2 id="media-session-invocation">Media session invocation</h2>

When the {{play()}} method on a <a>media element</a> is invoked and the <a>media
element</a>'s {{paused}} attribute is true and the <a>media element</a>'s
{{readyState}} attribute has the value {{HAVE_FUTURE_DATA}} or
{{HAVE_ENOUGH_DATA}}, then the user agent must run the <a>media session
invocation algorithm</a>, passing in the <a>media element</a> as
<var>current media element</var>. [[HTML]]

The <dfn>media session invocation algorithm</dfn> takes one argument,
<var>current media element</var>, and consists of the following steps:

<ol>
  <li>
    Let <var>media category state</var> be the <var>current media
    element</var>'s {{kind}} attribute's state value as defined in the list of
    <a href="#valid-media-categories">possible media categories</a>. If no known
    category match is found, let <var>media category state</var> be <code><a
    lt="default media state">Default</a></code>.
  </li>
  <li>
    Return and run the remaining steps asynchronously.
  </li>
  <li>
    If <var>media category state</var> is <code><a lt="default media
    state">Default</a></code> then let <var>media session</var> be the current
    <a>top-level browsing context</a>'s <a>media session</a>. Otherwise, let
    <var>media session</var> be a new <a>media session</a> with <var>media
    category state</var> characteristics.
  </li>
  <li>
    Set <var>current media element</var>'s <a>current media session</a> to
    <var>media session</var>.
  </li>
  <li>
    If <var>media session</var>'s <a>current state</a> is
    <code><a lt="active media session state">ACTIVE</a></code> abort any
    remaining steps and return.
  </li>
  <li>
    Optionally, based on platform conventions, request the most appropriate
    platform-level media focus for <var>media session</var> based on the current
    <var>media category state</var>.

    If this step is run and platform-level media focus can not be obtained for
    any reason then this algorithm must stall on this step.
  </li>
  <li>
    Set <var>media session</var>'s <a>current state</a> to
    <code><a lt="active media session state">ACTIVE</a></code>.
  </li>
  <li>
    Run these substeps:

    <dl class=switch>
      <dt>
        If <var>media category state</var> is <code><a lt="content media
        state">Content</a></code>
      </dt>
      <dd>
        <ol>
          <li>
            Optionally, based on platform conventions, the user agent may show
            an ongoing media interface in the underlying platform's
            notifications area and/or show an ongoing media interface in the
            underlying platform's lock screen area for <var>media session</var>.
          </li>
          <li>
            Optionally, based on platform conventions, the user agent may allow
            hardware and/or software media keys to control playback of
            <var>media session</var>'s <a>participating media elements</a>.
          </li>
        </ol>
      </dd>
      <dt>
        If <var>media category state</var> is <code><a lt="transient mixable
        media state">Transient_Mixable</a></code>, <code><a lt="transient
        exclusive media state">Transient_Exclusive</a></code> or <code><a
        lt="ambient media state">Ambient</a></code>
      </dt>
      <dd class="note">
        The user agent should not provide user access to any hardware or
        software media keys and not display any ongoing media interface in the
        underlying platform's notifications area or show any ongoing media
        interface in the underlying platform's lock screen area for
        <code><a lt="transient mixable media
        state">Transient_Mixable</a></code>-based <a>media sessions</a>.
      </dd>
      <dt>
        Otherwise, <var>media category state</var> is <code><a lt="default media
        state">Default</a></code>
      </dt>
      <dd class="note">
        @TBW

        Different platforms (e.g. desktop vs. mobile) currently enforce
        different platform-level default behavior for media elements. Should we
        define a consistent behavior across platforms or keep the existing
        defaults per platform? Do the existing defaults continue to make sense
        given the presence of the kind attribute? Can we say something here
        without being overly prescriptive about platform-level default
        conventions?
      </dd>
    </dl>
  </li>
</ol>

<h2 id="media-session-interruption">Media session interruption</h2>

A <a>media session</a> may be interrupted at any time after its
<a>media session invocation algorithm</a> has been run. This typically occurs
when another application or <a>media session</a> requests and is granted
platform-level media focus.

Interruptions can be both transient or permanent. A transient interruption means
we can choose to either continue playing out our content at a reduced volume for
the duration of the interruption or we can pause our content for the duration of
the interruption and then, optionally, resume playback when the interruption
ends. A permanent interruption means we must pause our media content
indefinitely.

When a <a>media session</a> receives an interruption notification from the
platform, run the
<a>media session interruption algorithm</a> passing in the <a>media session</a>
as <var>current media session</var>.

The <dfn>media session interruption algorithm</dfn> takes one argument,
<var>current media session</var>, and consists of running the following steps.

<ol>
  <li>
    Let <var>interrupting media category</var> be the <a>media category</a> that
    triggered this interruption. If this interruption has no known
    <a>media category</a>, let <var>interrupting media category</var> be
    <code><a lt="default media state">Default</a></code>.
  </li>
  <li>
    Let <var>current media category</var> be the <var>current media
    session</var>'s associated <a>media category</a>. If <var>current media
    session</var> has no known
    <a>media category</a>, let <var>current media category</var> be <code><a
    lt="default media state">Default</a></code>.
  </li>
  <li>
    Run these substeps:

    <dl class=switch>
      <dt>
        If <var>interrupting media category</var> is <code><a lt="content media
        state">Content</a></code>
      </dt>
      <dd>
        <ol>
          <li>
            If <var>current media category</var> is <code><a lt="default media
            state">Default</a></code> or <code><a lt="content media
            state">Content</a></code> then {{pause()}} all of <var>current media
            session</var>'s
            <a>participating media elements</a> and set
            <var>current media session</var>'s <a>current state</a> to
            <code><a lt="idle media session state">IDLE</a></code>.

            <p class="note">
              This implies that the next time the <a>media session invocation
              algorithm</a>
              is run against a <a>media element</a> in <a>media session</a>
              that we will re-request media focus according to the steps defined
              in that algorithm.
            </p>
          </li>
          <li>
            Optionally, based on platform conventions, the user agent must
            remove any previously established ongoing media interface in the
            underlying platform's notifications area and any ongoing media
            interface in the underlying platform's lock screen area for
            <var>current media session</var>, if any.
          </li>
          <li>
            Optionally, based on platform conventions, the user agent must
            prevent any hardware and/or software media keys from controlling
            playback of
            <var>current media session</var>'s <a lt="active media session
            state">active</a> <a>participating media elements</a>.
          </li>
        </ol>
      </dd>
      <dt>
        If <var>interrupting media category</var> is <code><a lt="transient
        mixable media state">Transient_Mixable</a></code>
      </dt>
      <dd>
        <ol>
          <li>
            If <var>current media category</var> is <code><a lt="default media
            state">Default</a></code> or <code><a lt="content media
            state">Content</a></code> then duck (i.e. reduce the output volume)
            all of <var>current media session</var>'s <a lt="active media
            session state">active</a> <a>participating media elements</a> and
            set
            <var>current media session</var>'s
            <a>current state</a> to <code><a lt="interrupted media session
            state">INTERRUPTED</a></code>.
            <p class="note">
              This implies that the next time the <a>media session release
              algorithm</a>
              is run that we will re-activate this <a>media session</a>
              according to the steps defined in that algorithm.
            </p>
          </li>
        </ol>
      </dd>
      <dt>
        If <var>interrupting media category</var> is <code><a lt="transient
        exclusive media state">Transient_Exclusive</a></code>
      </dt>
      <dd>
        <ol>
          <li>
            If <var>current media category</var> is <code><a lt="default media
            state">Default</a></code>, <code><a lt="content media
            state">Content</a></code>, <code><a lt="transient mixable media
            state">Transient_Mixable</a></code> or <code><a lt="transient
            exclusive media state">Transient_Exclusive</a></code> then
            {{pause()}} all of <var>current media session</var>'s
            <a>participating media elements</a> and set <var>current media
            session</var>'s <a>current state</a> to
            <code><a lt="interrupted media session
            state">INTERRUPTED</a></code>.

            <div class="note">
              <p>
                This implies that the next time the <a>media session invocation
                algorithm</a>
                is run against a <a>media element</a> in <a>media session</a>
                that we will re-request media focus according to the steps
                defined in that algorithm.
              </p>

              <p>
                It also implies that the next time the <a>media session release
                algorithm</a>
                is run that we will re-activate this <a>media session</a>
                according to the steps defined in that algorithm.
              </p>
            </div>
          </li>
        </ol>
      </dd>
    </dl>
  </li>
</ol>

<h2 id="media-session-release">Media session release</h2>

When a <a>media element</a>'s <a lt="ended playback">playback has ended</a>, run
the <a>media session release algorithm</a> passing in the
<a>media element</a> as <var>current media element</var>.

Additionally, any time a <a>media element</a>'s <a lt="media element load
algorithm">load algorithm</a> is run, also run the <a>media session release
algorithm</a> passing in the
<a>media element</a> as <var>current media element</var>.

The <dfn>media session release algorithm</dfn> takes one argument,
<var>current media element</var>, and consists of running the following steps.

<ol>
  <li>
    Set <var>current media session</var> to <var>current media element</var>'s
    <a>current media session</a>, if any.
  </li>
  <li>
    If <var>current media session</var> is empty then abort any remaining steps.
  </li>
  <li>
    Optionally, based on platform conventions, the user agent must release any
    currently held platform media focus for <var>current media session</var>.
  </li>

  <li>
    Optionally, based on platform conventions, the user agent must remove any
    previously established ongoing media interface in the underlying platform's
    notifications area and any ongoing media interface in the underlying
    platform's lock screen area for
    <var>current media session</var>, if any.
  </li>
  <li>
    Optionally, based on platform conventions, the user agent must prevent any
    hardware and/or software media keys from controlling playback of
    <var>current media session</var>'s
    <a>participating media elements</a>.
  </li>
  <li>
    Set <var>current media session</var>'s <a>current state</a> to
    <code><a lt="idle media session state">IDLE</a></code>.

    <p class="note">
      This implies that the next time the <a>media session invocation
      algorithm</a>
      is run against a <a>media element</a> in <a>current media session</a>
      that we will re-request media focus according to the steps defined in that
      algorithm.
    </p>
  </li>
  <li>
    Let <var>releasing media category</var> be the <var>current media
    session</var>'s associated <a>media category</a>. If <var>current media
    session</var> has no known
    <a>media category</a>, let <var>releasing media category</var> be <code><a
    lt="default media state">Default</a></code>.
  </li>
  <li>
    For every other <a>media session</a> known to the user agent, run the
    following substeps, passing in each <a>media session</a> as <var>incumbent
    media session</var>:

    <ol>
      <li>
        If <var>incumbent media session</var>'s <a>current state</a> is not
        <code><a lt="interrupted media session state">INTERRUPTED</a></code>
        then abort any remaining substeps and continue at the next available
        <var>incumbent media session</var>.
      </li>
      <li>
        Run these substeps:

        <dl class=switch>
          <dt>
            If <var>releasing media category</var> is <code><a lt="transient
            mixable media state">Transient_Mixable</a></code>
          </dt>
          <dd>
            <ol>
              <li>
                If <var>incumbent media session</var>'s associated <a>media
                category</a> is <code><a lt="default media
                state">Default</a></code> or
                <code><a lt="content media state">Content</a></code>
                then unduck (i.e. restore the volume) of <var>incumbent media
                session</var>'s
                <a>participating media elements</a>
                and set <var>incumbent media session</var>'s <a>current
                state</a> to <code><a lt="active media session
                state">ACTIVE</a></code>.
              </li>
            </ol>
          </dd>
          <dt>
            If <var>releasing media category</var> is <code><a lt="transient
            exclusive media state">Transient_Exclusive</a></code>
          </dt>
          <dd>
            <ol>
              <li>
                If <var>incumbent media session</var>'s associated <a>media
                category</a> is <code><a lt="default media
                state">Default</a></code>,
                <code><a lt="content media state">Content</a></code>, <code><a
                lt="transient mixable media state">Transient_Mixable</a></code>,
                or <code><a lt="transient exclusive media
                state">Transient_Exclusive</a></code> then un-{{pause()}} the
                <var>incumbent media session</var>'s <a lt="active media session
                state">active</a>
                <a>participating media elements</a>
                and set <var>incumbent media session</var>'s <a>current
                state</a> to <code><a lt="active media session
                state">ACTIVE</a></code>.
              </li>
            </ol>
          </dd>
        </dl>
      </li>
    </ol>
  </li>
</ol>
